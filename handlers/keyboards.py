from aiogram.types import KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData


class MenuCallBack(CallbackData, prefix="menu"):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã callback data –¥–ª—è –º–µ–Ω—é (—Ñ–∞–±—Ä–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤).

    Attrs:
        level (int): –£—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é.
        menu_name (str): –ò–º—è –º–µ–Ω—é.
        category (Optional[int]): –ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é. –ú–æ–∂–µ—Ç –±—ã—Ç—å `None`.
        page (int): –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.
        product_id (Optional[int]): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞. –ú–æ–∂–µ—Ç –±—ã—Ç—å `None`.

    """
    level: int
    menu_name: str
    category: int | None = None
    page: int = 1
    product_id: int | None = None


class CartCallback(CallbackData, prefix="cart"):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã callback data –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã (—Ñ–∞–±—Ä–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤).

    Attrs:
        menu_name (str): –ò–º—è –º–µ–Ω—é.
        page (int): –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.
        product_id (Optional[int]): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞. –ú–æ–∂–µ—Ç –±—ã—Ç—å `None`.

    """
    menu_name: str
    page: int = 1
    product_id: int | None = None


def get_keyboard(*btns, placeholder: str = None, sizes: tuple[int] = (2,)):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–Ω–æ–ø–æ–∫,
    —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ —Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫.

    Args:
        *btns (str): –ò–∑–º–µ–Ω—è–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
        placeholder (str, optional): –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None
        sizes (tuple[int], optional): –ö–æ—Ä—Ç–µ–∂, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ.
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é (2,) - –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ

    Returns:
        ReplyKeyboardMarkup: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏.

    Raises:
        ValueError: –ï—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç.
        TypeError: –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ - –Ω–µ —Å—Ç—Ä–æ–∫–∞.

    """

    if not btns:
        raise ValueError("Buttons must exist")
    for button in btns:
        if not isinstance(button, str):
            raise TypeError("Each button must be a string")

    keyboard = ReplyKeyboardBuilder()

    for text in btns:
        keyboard.add(KeyboardButton(text=text))

    return keyboard.adjust(*sizes).as_markup(resize_keyboard=True, input_field_placeholder=placeholder)


def get_callback_btns(*, btns: dict[str, str], sizes: tuple[int] = (2,)):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –∏–º–µ—Ç—å callback-–¥–∞–Ω–Ω—ã–µ.

    Args:
        btns (dict[str, str]): –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ - —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫, –∞ –∑–Ω–∞—á–µ–Ω–∏—è - callback_data.
        sizes (tuple[int], optional): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - 2 –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ.

    Returns:
        InlineKeyboardMarkup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏.

    Raises:
        TypeError: –ï—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–º—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - –Ω–µ —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –µ–µ callback_data - –Ω–µ —Å—Ç—Ä–æ—á–∫–∏.
        ValueError: –ï—Å–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø—É—Å—Ç–æ–π.

    """
    if not isinstance(btns, dict):
        raise TypeError("Buttons must be a dictionary")
    if not btns:
        raise ValueError("Buttons dictionary cannot be empty")
    for button, call in btns.items():
        if not isinstance(button, str) and not isinstance(call, str):
            raise TypeError("Both button and callback data must be a string")
        if not isinstance(button, str):
            raise TypeError("Each button must be a string")
        if not isinstance(call, str):
            raise TypeError("Each callback data must be a string")

    keyboard = InlineKeyboardBuilder()

    for text, data in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))

    return keyboard.adjust(*sizes).as_markup()


def get_user_catalog_btns(*, level: int, categories: list, sizes: tuple[int] = (2,)):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

     –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤.

     Args:
         level (int): –£—Ä–æ–≤–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≤ callback data.
         categories (list): –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤.
         sizes (tuple[int], optional): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - 2 –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É.

     Returns:
         InlineKeyboardMarkup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏.

     """
    keyboard = InlineKeyboardBuilder()

    for c in categories:
        keyboard.add(InlineKeyboardButton(text=c.name,
                                          callback_data=MenuCallBack(level=level+1, menu_name=c.name,
                                                                     category=c.id).pack()))

    return keyboard.adjust(*sizes).as_markup()


def get_products_btns(*, level: int, category: int, page: int, pagination_btns: dict, product_id: int):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.

    Args:
        level (int): –£—Ä–æ–≤–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é..
        category (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
        page (int): –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.
        pagination_btns (dict): –°–ª–æ–≤–∞—Ä—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –≥–¥–µ –∫–ª—é—á–∏ ‚Äî —ç—Ç–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏,
            –∞ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –¥–µ–π—Å—Ç–≤–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'next' –∏–ª–∏ 'previous').
        product_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.

    Returns:
        InlineKeyboardMarkup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏.

    """
    keyboard = InlineKeyboardBuilder()
    
    keyboard.add(InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å üíµ',
                                      callback_data=MenuCallBack(level=level, menu_name='add_to_cart',
                                                                 product_id=product_id).pack()))

    row = []
    for text, menu_name in pagination_btns.items():
        if menu_name == "next":
            row.append(InlineKeyboardButton(text=text, callback_data=MenuCallBack(
                                                level=level,
                                                menu_name=menu_name,
                                                category=category,
                                                page=page+1).pack()))

        elif menu_name == "previous":
            row.append(InlineKeyboardButton(text=text, callback_data=MenuCallBack(
                                                level=level,
                                                menu_name=menu_name,
                                                category=category,
                                                page=page-1).pack()))

    return keyboard.row(*row).as_markup()


def get_user_cart(*, page: int | None, pagination_btns: dict | None, product_id: int | None, sizes: tuple[int] = (3,)):
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    Args:
        page (int | None): –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ.
        pagination_btns (dict | None): –°–ª–æ–≤–∞—Ä—å –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏,
            –≥–¥–µ –∫–ª—é—á ‚Äî —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ ('previous' –∏–ª–∏ 'next').
        product_id (int | None): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π (—É–¥–∞–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞).
        sizes (tuple[int], optional): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É.

    Returns:
        InlineKeyboardMarkup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏.

    """
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(
        text='–£–¥–∞–ª–∏—Ç—å',
        callback_data=CartCallback(menu_name='delete', product_id=product_id, page=page).pack()))
    keyboard.add(InlineKeyboardButton(
        text='-1',
        callback_data=CartCallback(menu_name='decrement', product_id=product_id, page=page).pack()))
    keyboard.add(InlineKeyboardButton(
        text='+1',
        callback_data=CartCallback(menu_name='increment', product_id=product_id, page=page).pack()))
    keyboard.add(InlineKeyboardButton(
        text='–ó–∞–∫–∞–∑–∞—Ç—å',
        callback_data=CartCallback(menu_name='order').pack()))

    keyboard.adjust(*sizes)

    row = []
    for text, menu_name in pagination_btns.items():
        if menu_name == "next":
            row.append(InlineKeyboardButton(
                text=text,
                callback_data=CartCallback(menu_name=menu_name, page=page+1).pack()))
        elif menu_name == "previous":
            row.append(InlineKeyboardButton(
                text=text,
                callback_data=CartCallback(menu_name=menu_name, page=page-1).pack()))

    return keyboard.row(*row).as_markup()
